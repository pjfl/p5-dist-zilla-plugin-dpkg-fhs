package Dist::Zilla::Plugin::Dpkg::FHS;

use 5.010001;
use namespace::autoclean;
use version; our $VERSION = qv( sprintf '0.1.%d', q$Rev: 5 $ =~ /\d+/gmx );

use File::Spec::Functions qw( catdir catfile );
use List::Util            qw( first );
use Module::Load;
use Moose;
use Moose::Util::TypeConstraints;
use Pod::Simple::Text;
use Text::Format;

extends 'Dist::Zilla::Plugin::Dpkg';

# Type constraints
enum    'WebServer',     [ qw( all apache native nginx none ) ];

subtype 'ApacheModule',  as 'Str', where { $_ =~ m{ \A [a-z_]+ \z }mx };

subtype 'ApacheModules', as 'ArrayRef[ApacheModule]',
   message { 'The value provided for apache_modules does not look like a list '
           . 'of whitespace-separated Apache modules' };

coerce  'ApacheModules', from 'Str', via { [ split m{ \s+ }mx ] };

subtype 'ListOfStr',     as 'ArrayRef[Str]',
   message { 'Not a list of whitespace-separated strings' };

coerce  'ListOfStr',     from 'Str', via { [ split m{ \s+ }mx ] };

# Attribute default overrides
has '+default_template_default' =>
   default => '# Defaults for {$package_name} initscript
# sourced by /etc/init.d/{$package_name}
# installed at /etc/default/{$package_name} by the maintainer scripts

# This is a POSIX shell fragment
';

has '+install_template_default' => default => '';

has '+package_section' => default => 'perl';

has '+postinst_template_default' =>
   default => '#!/bin/sh
# Postinst script for {$package_name}
#
# See: dh_installdeb(1)

set -e

PREFIX={$install_prefix}
PACKAGE={$package_name}
VERDIR={$verdir}

case "$1" in
    configure)
        default=$\{PREFIX\}/$\{PACKAGE\}/default
        appldir=$\{PREFIX\}/$\{PACKAGE\}/$\{VERDIR\}

        [ -e "$\{default\}" ] || ln -s $\{appldir\} $\{default\}

        {$install_cmd}
        {$webserver_config_link}
        {$webserver_restart}
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument: $1" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
';

has '+postrm_template_default' =>
   default => '#!/bin/sh

set -e

PREFIX={$install_prefix}
PACKAGE={$package_name}
VERDIR={$verdir}

case "$1" in
   purge)
      # Stop the app and revoke the startup files
      {$uninstall_cmd}

      # Remove the nginx config
      if [  -h /etc/nginx/sites-available/$\{PACKAGE\} ]; then
         rm -f /etc/nginx/sites-available/$\{PACKAGE\}
      fi

      # Remove the apache config
      if [  -e /etc/apache2/sites-available/$\{PACKAGE\} ]; then
         rm -f /etc/apache2/sites-enabled/$\{PACKAGE\}
         rm -f /etc/apache2/sites-available/$\{PACKAGE\}
      fi

      packd=$\{PREFIX\}/$\{PACKAGE\};

      # Remove the application directory
      cd $\{packd\} && test -d "$\{VERDIR\}" && rm -fr $\{VERDIR\}; rc=$\{?\}

      # Remove the package directory if there are no versions left
      [ $\{rc\} -eq 0 ] && cd $\{PREFIX\} && test -d "$\{packd\}" \
                      && rmdir $\{packd\} 2>/dev/null
   ;;

   remove|upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
   ;;

   *)
      echo "postrm called with unknown argument: $1" >&2
      exit 1
   ;;
esac

#DEBHELPER#

exit 0
';

has '+rules_template_default' =>
   default => '#!/usr/bin/make -f

override_dh_auto_configure:
	dh_auto_configure -- install_base={$install_prefix}/{$package_name}/{$verdir}

override_dh_auto_build:

override_dh_gencontrol:
	dh_gencontrol -- -v{$debian_version}

override_dh_pysupport:

%:
	dh $@

';

# Public attributes
has 'apache_modules'     => is => 'ro', isa => 'ApacheModules', coerce => 1;

has 'bindir'             => is => 'ro', isa => 'Str', default =>
   sub { catdir( '${PREFIX}', '${PACKAGE}', '${VERDIR}', 'bin' ) };

has 'debian_version'     => is => 'ro', isa => 'Str', lazy => 1,
   builder               => '_build_debian_version';

has 'dh_format_spec'     => is => 'ro', isa => 'Str', default => 'Format-Specification: http://svn.debian.org/wsvn/dep/web/deps/dep5.mdwn?op=file&rev=135';

has 'executable_files'   => is => 'ro', isa => 'ListOfStr', coerce => 1,
   default               => 'debian/postinst debian/postrm debian/rules';

has 'install_cmd'        => is => 'ro', isa => 'Str', required => 1;

has 'install_prefix'     => is => 'ro', isa => 'Str', default => '/opt';

has 'license_keys'       => is => 'ro', isa => 'HashRef', lazy => 1,
   builder               => '_build_license_keys';

has 'module_abstract'    => is => 'ro', isa => 'Str', lazy => 1,
   builder               => '_build_module_abstract';

has 'module_description' => is => 'ro', isa => 'Str', lazy => 1,
   builder               => '_build_module_description';

has 'module_metadata'    => is => 'ro', isa => 'Object', lazy => 1,
   builder               => '_build_module_metadata';

has 'permalink'          => is => 'ro', isa => 'Str',
   default               => 'https:://metacpan.org/release';

has 'phase'              => is => 'ro', isa => 'Int', default => 1;

has 'short_version'      => is => 'ro', isa => 'Str', lazy => 1,
   builder               => '_build_short_version';

has 'verdir'             => is => 'ro', isa => 'Str', lazy => 1,
   builder               => '_build_verdir';

has 'web_server'         => is => 'ro', isa => 'WebServer', default => 'native';

has 'uninstall_cmd'      => is => 'ro', isa => 'Str', required => 1;

# Package variables
my $text_cache = {}; my $vars_cache;

# Private subroutines
my $get_homepage = sub {
   return sprintf '%s/%s/', $_[ 0 ]->permalink, $_[ 0 ]->package_name;
};

my $license_content = sub {
   my ($licenses, $maintainer) = @_; my @res = ();

   my $formatter = Text::Format->new; $formatter->leftMargin( 2 );

   for my $license (keys %{ $licenses }) {
      my $class = "Software::License::${license}"; load $class;
      my $swl   = $class->new( { holder => $maintainer } );
      my $text  = $formatter->format( $swl->fulltext );

      $text =~ s{ \A \z }{ .}gmx; push @res, q(), "License: ${license}", $text;
   }

   return \@res;
};

my $set_vars_for_apache = sub {
   my ($self, $vars) = @_;

   $vars->{package_binary_depends} .= ', apache2';
   $vars->{webserver_config_link } .= '# Symlink to the apache config for this environment
        rm -f /etc/apache2/sites-available/${PACKAGE}
        ln -s /srv/$PACKAGE/config/apache/${PACKAGE}.conf /etc/apache2/sites-available/$PACKAGE
';
   $vars->{webserver_restart} .= 'a2enmod proxy proxy_http rewrite ';
   $vars->{webserver_restart} .= join ' ', @{ $self->apache_modules || [] };
   $vars->{webserver_restart} .= '
        a2ensite ${PACKAGE}
        mkdir -p /var/log/apache2/${PACKAGE}
        if which invoke-rc.d >/dev/null 2>&1; then
            invoke-rc.d apache2 restart
        else
            /etc/init.d/apache2 restart
        fi
';

   return;
};

my $set_vars_for_native = sub {
   my ($self, $vars) = @_;

   $vars->{webserver_restart} .= '
        if which invoke-rc.d >/dev/null 2>&1; then
            invoke-rc.d ${PACKAGE} restart
        else
            /etc/init.d/${PACKAGE} restart
        fi
';

   return;
};

my $set_vars_for_nginx = sub {
   my ($self, $vars) = @_;

   $vars->{package_binary_depends} .= ', nginx';
   $vars->{webserver_config_link } .= '# Symlink to the nginx config for this environment
        rm -f /etc/nginx/sites-available/${PACKAGE}
        ln -s /srv/$PACKAGE/config/nginx/${PACKAGE}.conf /etc/nginx/sites-available/${PACKAGE}
';
   $vars->{webserver_restart} .= 'if which invoke-rc.d >/dev/null 2>&1; then
        invoke-rc.d nginx restart
        else
            /etc/init.d/nginx restart
        fi
';

   return;
};

my $squeeze = sub {
   (my $v = $_[ 0 ] // q()) =~ s{ \s+ }{ }gmx; return $v;
};

my $trim = sub {
   my $chs = $_[ 1 ] // " \t"; (my $v = $_[ 0 ] // q()) =~ s{ \A [$chs]+ }{}mx;

   chomp $v; $v =~ s{ [$chs]+ \z }{}mx; return $v;
};

my $pod2text = sub {
   my $v = shift; $v or return q();

   exists $text_cache->{ $v } and return $text_cache->{ $v };

   my $parser = Pod::Simple::Text->new;
   my $text; $parser->output_string( \$text );

   $parser->parse_string_document( "=pod\n\n${v}" ); $text =~ s{ [\n] }{ }gmx;

   return $text_cache->{ $v } = $trim->( $squeeze->( $text ) );
};

# Attribute constructors
sub _build_debian_version {
   my $self = shift;

   return $self->short_version.($self->phase ? '-'.$self->phase : q());
}

sub _build_license_keys {
   return {
      perl       => 'Perl_5',
      perl_5     => 'Perl_5',
      apache     => [ map { "Apache_$_" } qw( 1_1 2_0 ) ],
      artistic   => 'Artistic_1_0',
      artistic_2 => 'Artistic_2_0',
      lgpl       => [ map { "LGPL_$_" } qw( 2_1 3_0 ) ],
      bsd        => 'BSD',
      gpl        => [ map { "GPL_$_" } qw( 1 2 3 ) ],
      mit        => 'MIT',
      mozilla    => [ map { "Mozilla_$_" } qw( 1_0 1_1 ) ], };
}

sub _build_module_abstract {
   my $self = shift; my $meta = $self->module_metadata;

   my $abstract = q(); ($abstract = $meta->pod( 'Name' ) // q())
      =~ s{ \A [^\-]+ \s* [\-] \s* }{}mx; chomp $abstract;

   return $pod2text->( $abstract );
}

sub _build_module_description {
   my $self = shift; my $meta = $self->module_metadata;

   return $pod2text->( $meta->pod( 'Description' ) );
}

sub _build_module_metadata {
   load 'Module::Metadata'; return Module::Metadata->new_from_file
      ( $_[ 0 ]->zilla->main_module->name, collect_pod => 1 );
}

sub _build_short_version {
   my $self  = shift;
   my ($ver) = $self->zilla->version
      =~ m{ \A (?: v )? ( \d+ \. \d+ ) (?: [\._] \d+ )? \z }mx;

   return $ver
}

sub _build_verdir {
   my $self = shift;

   return 'v'.$self->short_version.($self->phase ? 'p'.$self->phase : q());
}

# Public methods
sub add_debian_copyright {
   my $self = shift; my (@res, %licenses);

   my $zilla      = $self->zilla;
   my $year       = 1900 + (localtime)[ 5 ];
   my $maintainer = $pod2text->( $zilla->authors->[ 0 ] );
   my $license    = $self->license_keys->{ $zilla->license->meta2_name }
      or  die 'Unknown copyright license '.$zilla->license->meta2_name;
   my %fields     = ( Name       => $self->package_name,
                      Maintainer => $maintainer,
                      Source     => $self->$get_homepage );

   push @res, $self->dh_format_spec;

   for ( grep { defined $fields{ $_ } } keys %fields) {
      push @res, "$_: ".$fields{ $_ };
   }

   push @res, q(), 'Files: *', "Copyright: ${maintainer}";

   if ($license ne 'Perl_5') { $licenses{ $license } = 1 }
   else { $licenses{ 'Artistic_1_0' } = $licenses{ 'GPL_1' } = 1 }

   push @res, 'License: '.(join ' or ', keys %licenses);
   # debian/* files information - We default to the module being
   # licensed as the super-set of the module and Perl itself.
   $licenses{ 'Artistic_1_0' } = $licenses{ 'GPL_1' } = 1;

   push @res, q(), 'Files: debian/*', "Copyright: ${year}, ${maintainer}";
   push @res, 'License: '.(join ' or ', keys %licenses);
   push @res, @{ $license_content->( \%licenses, $maintainer ) };

   $self->add_file( Dist::Zilla::File::InMemory->new( {
      content => (join "\n", @res), name => "debian/copyright", } ) );

   return;
}

sub add_docs {
   my $self  = shift; my $package = $self->package_name;

   $self->add_file( Dist::Zilla::File::InMemory->new( {
      content => "README\n", name => "debian/${package}.docs", } ) );

   return;
}

sub enhance {
   my ($self, $vars) = @_; defined $vars_cache and return $vars_cache;

   my $desc = $self->module_description;

   $vars->{author             } = $pod2text->( $vars->{author} );
   $vars->{debian_version     } = $self->debian_version;
   $vars->{install_prefix     } = $self->install_prefix;
   $vars->{package_description} = $self->module_abstract."\n\t${desc}";
   $vars->{verdir             } = $self->verdir;
   $vars->{install_cmd        } = catfile( $self->bindir, $self->install_cmd );
   $vars->{uninstall_cmd      } = catfile( $self->bindir, $self->uninstall_cmd);

  ($self->web_server eq 'apache'  or $self->web_server eq 'all')
      and $self->$set_vars_for_apache( $vars );
   $self->web_server eq 'native' and $self->$set_vars_for_native( $vars );
  ($self->web_server eq 'nginx'   or $self->web_server eq 'all')
      and $self->$set_vars_for_nginx ( $vars );

   return $vars_cache = $vars;
}

sub fix_changelog {
   my $self  = shift;
   my $zilla = $self->zilla;
   my $from  = 'CPAN Author <cpan@example.com>';
   my $to    = $pod2text->( $zilla->authors->[ 0 ] );

   for my $file (grep { $_->name eq 'debian/changelog' } @{ $zilla->files }) {
      my $content = $file->_content; $content =~ s{ \Q$from\E }{$to}gmx;

      $file->_content( $content ); last;
   }

   return;
}

sub maybe_set_execute_permission {
   my ($self, $files) = @_; defined $files->[ 0 ] or return;

   my $name = $files->[ -1 ]->name;

   first { $name eq $_ } @{ $self->executable_files }
      and $files->[ -1 ]->mode( oct '0755' );

   return;
}

# Construction
around '_generate_file' => sub { # So it's a private method, meh
   my ($orig, $self, $file, $required, $vars) = @_;

   my $res = $orig->( $self, $file, $required, $self->enhance( $vars ) );

   $self->maybe_set_execute_permission( $self->zilla->files );

   return $res;
};

after 'setup_installer' => sub {
   my $self = shift;

   $self->add_debian_copyright; $self->add_docs; $self->fix_changelog;

   return;
};

__PACKAGE__->meta->make_immutable;

no Moose;

1;

__END__

=pod

=encoding utf-8

=head1 Name

Dist::Zilla::Plugin::Dpkg::FHS - Create Debian packaging for the FHS specification

=head1 Synopsis

   # In your dist.ini
   [Dpkg::FHS]
   install_cmd   = your-app-cli install
   uninstall_cmd = your-app-cli uninstall

   [ChangelogFromGit::Debian]
   file_name     = debian/changelog

   # Then install with
   dzil authordeps --missing | cpanm

=head1 Description

Create Debian packaging for the FHS specification. The install prefix can be
set from F<dist.ini>

Like L<Dist::Zilla::Plugin::Dpkg::Perlbrew::Starman> but better generalised

=head1 Configuration and Environment

Defines the following attributes;

=over 3

=item C<apache_modules>

A space separated list of Apache modules to enable

=item C<bindir>

The directory where the install and uninstall commands are found. Defaults
to F<${PREFIX}/${PACKAGE}/${VERDIR}/bin>. The shell variables are evaluated
at run time

=item C<debian_version>

The Debian version included in the archive file name. Defaults to
F<< <short_version>-<phase> >>

=item C<dh_format_spec>

URI of specification for the Debian copyright file

=item C<executable_files>

A space separated list of file to make executable. Defaults to;
F<debian/postinst>, F<debian/postrm>, and F<debian/rules>

=item C<install_cmd>

A required string. The command used to complete the installation after the
file have been unpacked

=item C<install_prefix>

The path under which the application will be installed. Defaults to F</opt>
as perl my loose interpretation of the FHS specification

=item C<license_keys>

The hash reference is used to translate Perl license names (meta specification
2) into L<Software::License> subclass names

=item C<module_abstract>

The one line description of the application scraped from the main module POD

=item C<module_description>

Description taken from the main module POD

=item C<module_metadata>

An instance of L<Module::Metadata>

=item C<permalink>

The base of the URI to the application home page. Defaults to
F<https:://metacpan.org/release>

=item C<phase>

An integer which default to 1. Appended to the short version number to create
an installation directory name that allows for multiple instances of the same
or different versions

=item C<short_version>

Just the major and minor version numbers not the subversion

=item C<verdir>

The version directory. Defaults to F<< v<short_version>p<phase> >>

=item C<web_server>

An enumerated list. One of; C<all>, C<apache>, C<native>, C<nginx>, or C<none>.
Determines which webserver(s) if any will be started when the machine boots

=item C<uninstall_cmd>

A required string. The command used to uninstall the application

=back

=head1 Subroutines/Methods

=head2 C<add_debian_copyright>

Inject a Debian copyright file into the current build

=head2 C<add_docs>

Add the F<README> file to the Debian documentation

=head2 C<enhance>

Adds more attributes to the stash which is passed to the templating subroutine
when files are generated

=head2 C<fix_changelog>

Replace the default author and author email strings with something more
useful

=head2 C<maybe_set_execute_permission>

Checks if the last file in the list of L<zilla|Dist::Zilla/files> files is in
the L</executable_files> list, sets the file's execute permission

=head1 Diagnostics

None

=head1 Dependencies

=over 3

=item L<Dist::Zilla::Plugin::Dpkg>

=item L<Module::Load>

=item L<Module::Metadata>

=item L<Moose>

=item L<Pod::Simple>

=item L<Software::License>

=item L<Text::Format>

=back

=head1 Incompatibilities

There are no known incompatibilities in this module

=head1 Bugs and Limitations

There are no known bugs in this module. Please report problems to
http://rt.cpan.org/NoAuth/Bugs.html?Dist=Dist-Zilla-Plugin-Dpkg-FHS.
Patches are welcome

=head1 Acknowledgements

Larry Wall - For the Perl programming language

=head1 Author

Peter Flanigan, C<< <pjfl@cpan.org> >>

=head1 License and Copyright

Copyright (c) 2015 Peter Flanigan. All rights reserved

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself. See L<perlartistic>

This program is distributed in the hope that it will be useful,
but WITHOUT WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE

=cut

# Local Variables:
# mode: perl
# tab-width: 3
# End:
# vim: expandtab shiftwidth=3:
